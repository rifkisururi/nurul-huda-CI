<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Penguru extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Penguru_model');
    } 

    /*
     * Listing of pengurus
     */
    function index()
    {
        $data['pengurus'] = $this->Penguru_model->get_all_pengurus();
        
        $data['_view'] = 'penguru/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new penguru
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('nama','Nama','required');
		$this->form_validation->set_rules('email','Email','required|valid_email');
		$this->form_validation->set_rules('no_hp1','No Hp1','numeric');
		$this->form_validation->set_rules('no_hp2','No Hp2','numeric');
		$this->form_validation->set_rules('hak_akses','Hak Akses','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'hak_akses' => $this->input->post('hak_akses'),
				'password' => $this->input->post('password'),
				'nama' => $this->input->post('nama'),
				'email' => $this->input->post('email'),
				'no_hp1' => $this->input->post('no_hp1'),
				'no_hp2' => $this->input->post('no_hp2'),
            );
            
            $penguru_id = $this->Penguru_model->add_penguru($params);
            redirect('penguru/index');
        }
        else
        {            
            $data['_view'] = 'penguru/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a penguru
     */
    function edit($id)
    {   
        // check if the penguru exists before trying to edit it
        $data['penguru'] = $this->Penguru_model->get_penguru($id);
        
        if(isset($data['penguru']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('nama','Nama','required');
			$this->form_validation->set_rules('email','Email','required|valid_email');
			$this->form_validation->set_rules('no_hp1','No Hp1','numeric');
			$this->form_validation->set_rules('no_hp2','No Hp2','numeric');
			$this->form_validation->set_rules('hak_akses','Hak Akses','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'hak_akses' => $this->input->post('hak_akses'),
					'password' => $this->input->post('password'),
					'nama' => $this->input->post('nama'),
					'email' => $this->input->post('email'),
					'no_hp1' => $this->input->post('no_hp1'),
					'no_hp2' => $this->input->post('no_hp2'),
                );

                $this->Penguru_model->update_penguru($id,$params);            
                redirect('penguru/index');
            }
            else
            {
                $data['_view'] = 'penguru/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The penguru you are trying to edit does not exist.');
    } 

    /*
     * Deleting penguru
     */
    function remove($id)
    {
        $penguru = $this->Penguru_model->get_penguru($id);

        // check if the penguru exists before trying to delete it
        if(isset($penguru['id']))
        {
            $this->Penguru_model->delete_penguru($id);
            redirect('penguru/index');
        }
        else
            show_error('The penguru you are trying to delete does not exist.');
    }
    
}
